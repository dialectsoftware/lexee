config {
   name = "EKS config language"
   exit_on_error = "False"
   aws {
	   eks {
		   prefix = "MY"
	   }
	   profile = "default"
   }
}

import security {
	module = "aws.iam"
}

variable aws profile {
	description = "profile"
	default = "{{ config.aws.profile }}"
}

data aws sts identity current {}


# Note that the AssumeRolePolicyDocument is about defining the trust relationship and not the actual permissions of the role you are creating.
generator security role eks {
	Path="/"
	RoleName = "{{  config.aws.eks.prefix }}ServiceRoleForAmazonEKS"
	Description = "EKS Service Role"
	AssumeRolePolicyDocument= {
		"Version":"2012-10-17",
		"Statement" : [{
			"Effect" :"Allow",
			"Principal" : {
				"Service":"eks.amazonaws.com",
				"AWS":"arn:aws:iam::{{ data.aws.sts.identity.current.Account }}:root"
			},
			"Action": "sts:AssumeRole"
		}]			
	}
	Tags=[]
	depends_on=["data.aws.sts.identity.current"]
}

# Create policy for the EKS service role.
generator security policy eks {
	PolicyName = "{{  config.aws.eks.prefix }}ServiceRolePolicyForAmazonEKS"
	PolicyDocument= {
		"Version":"2012-10-17",
		"Statement" : [{
			"Effect" :"Allow",
			"Action": "iam:PassRole",
			"Resource":"{{  generator.security.role.eks.response.Role.Arn }}"			
		},
		{
			"Effect" :"Allow",
			"Action": "eks:*",
			"Resource": "*"

		}]		
	}
	Tags=[]
	depends_on=["generator.security.role.eks"]
}

# Attach policy for the EKS service role.
generator security attach_policy eks {
	PolicyArn = "{{ generator.security.policy.eks.response.Policy.Arn }}"
	RoleName = "{{ generator.security.role.eks.response.Role.RoleName }}"
	depends_on=["generator.security.role.eks","generator.security.policy.eks"]
}


# Attach managed policy for the EKS service role.
generator security attach_policy cluster {
	PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
	RoleName = "{{ generator.security.role.eks.response.Role.RoleName }}"
	depends_on=["generator.security.role.eks","generator.security.policy.eks"]
}
	

# Attach managed policy for the EKS service role.
generator security attach_policy viewonly {
	PolicyArn = "arn:aws:iam::aws:policy/job-function/ViewOnlyAccess"
	RoleName = "{{ generator.security.role.eks.response.Role.RoleName }}"
	depends_on=["generator.security.role.eks","generator.security.policy.eks"]
}


# Attach managed policy for the EKS service role.
generator security attach_policy events {
	PolicyArn = "arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess"
	RoleName = "{{ generator.security.role.eks.response.Role.RoleName }}"
	depends_on=["generator.security.role.eks","generator.security.policy.eks"]
}

# Attach managed policy for the EKS service role.
generator security attach_policy logs {
	PolicyArn = "arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess"
	RoleName = "{{ generator.security.role.eks.response.Role.RoleName }}"
	depends_on=["generator.security.role.eks","generator.security.policy.eks"]
}

# Attach managed policy for the EKS service role.
generator security attach_policy service {
	PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
	RoleName = "{{ generator.security.role.eks.response.Role.RoleName }}"
	depends_on=["generator.security.role.eks","generator.security.policy.eks"]
}


